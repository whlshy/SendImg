var se=s=>{throw TypeError(s)};var S=(s,e,t)=>e.has(s)?se("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(s):e.set(s,t);import{$ as K,a as X}from"./peerjs-js-binarypack-0qb93TeF.js";import{a as V}from"./webrtc-adapter-DzGuYBkV.js";function k(s,e,t,n){Object.defineProperty(s,e,{get:t,set:n,enumerable:!0,configurable:!0})}class Q{constructor(){this.chunkedMTU=16300,this._dataCount=1,this.chunk=e=>{const t=[],n=e.byteLength,o=Math.ceil(n/this.chunkedMTU);let a=0,r=0;for(;r<n;){const l=Math.min(n,r+this.chunkedMTU),c=e.slice(r,l),g={__peerData:this._dataCount,n:a,data:c,total:o};t.push(g),r=l,a++}return this._dataCount++,t}}}function oe(s){let e=0;for(const o of s)e+=o.byteLength;const t=new Uint8Array(e);let n=0;for(const o of s)t.set(o,n),n+=o.byteLength;return t}const j=V.default||V,D=new class{isWebRTCSupported(){return typeof RTCPeerConnection<"u"}isBrowserSupported(){const s=this.getBrowser(),e=this.getVersion();return this.supportedBrowsers.includes(s)?s==="chrome"?e>=this.minChromeVersion:s==="firefox"?e>=this.minFirefoxVersion:s==="safari"?!this.isIOS&&e>=this.minSafariVersion:!1:!1}getBrowser(){return j.browserDetails.browser}getVersion(){return j.browserDetails.version||0}isUnifiedPlanSupported(){const s=this.getBrowser(),e=j.browserDetails.version||0;if(s==="chrome"&&e<this.minChromeVersion)return!1;if(s==="firefox"&&e>=this.minFirefoxVersion)return!0;if(!window.RTCRtpTransceiver||!("currentDirection"in RTCRtpTransceiver.prototype))return!1;let t,n=!1;try{t=new RTCPeerConnection,t.addTransceiver("audio"),n=!0}catch{}finally{t&&t.close()}return n}toString(){return`Supports:
    browser:${this.getBrowser()}
    version:${this.getVersion()}
    isIOS:${this.isIOS}
    isWebRTCSupported:${this.isWebRTCSupported()}
    isBrowserSupported:${this.isBrowserSupported()}
    isUnifiedPlanSupported:${this.isUnifiedPlanSupported()}`}constructor(){this.isIOS=typeof navigator<"u"?["iPad","iPhone","iPod"].includes(navigator.platform):!1,this.supportedBrowsers=["firefox","chrome","safari"],this.minFirefoxVersion=59,this.minChromeVersion=72,this.minSafariVersion=605}},ie=s=>!s||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(s),G=()=>Math.random().toString(36).slice(2),W={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:["turn:eu-0.turn.peerjs.com:3478","turn:us-0.turn.peerjs.com:3478"],username:"peerjs",credential:"peerjsp"}],sdpSemantics:"unified-plan"};class re extends Q{noop(){}blobToArrayBuffer(e,t){const n=new FileReader;return n.onload=function(o){o.target&&t(o.target.result)},n.readAsArrayBuffer(e),n}binaryStringToArrayBuffer(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n)&255;return t.buffer}isSecure(){return location.protocol==="https:"}constructor(...e){super(...e),this.CLOUD_HOST="0.peerjs.com",this.CLOUD_PORT=443,this.chunkedBrowsers={Chrome:1,chrome:1},this.defaultConfig=W,this.browser=D.getBrowser(),this.browserVersion=D.getVersion(),this.pack=X,this.unpack=K,this.supports=function(){const t={browser:D.isBrowserSupported(),webRTC:D.isWebRTCSupported(),audioVideo:!1,data:!1,binaryBlob:!1,reliable:!1};if(!t.webRTC)return t;let n;try{n=new RTCPeerConnection(W),t.audioVideo=!0;let o;try{o=n.createDataChannel("_PEERJSTEST",{ordered:!0}),t.data=!0,t.reliable=!!o.ordered;try{o.binaryType="blob",t.binaryBlob=!D.isIOS}catch{}}catch{}finally{o&&o.close()}}catch{}finally{n&&n.close()}return t}(),this.validateId=ie,this.randomToken=G}}const m=new re,ae="PeerJS: ";var Y;(function(s){s[s.Disabled=0]="Disabled",s[s.Errors=1]="Errors",s[s.Warnings=2]="Warnings",s[s.All=3]="All"})(Y||(Y={}));class ce{get logLevel(){return this._logLevel}set logLevel(e){this._logLevel=e}log(...e){this._logLevel>=3&&this._print(3,...e)}warn(...e){this._logLevel>=2&&this._print(2,...e)}error(...e){this._logLevel>=1&&this._print(1,...e)}setLogFunction(e){this._print=e}_print(e,...t){const n=[ae,...t];for(const o in n)n[o]instanceof Error&&(n[o]="("+n[o].name+") "+n[o].message);e>=3?console.log(...n):e>=2?console.warn("WARNING",...n):e>=1&&console.error("ERROR",...n)}constructor(){this._logLevel=0}}var i=new ce,N={},le=Object.prototype.hasOwnProperty,p="~";function x(){}Object.create&&(x.prototype=Object.create(null),new x().__proto__||(p=!1));function he(s,e,t){this.fn=s,this.context=e,this.once=t||!1}function q(s,e,t,n,o){if(typeof t!="function")throw new TypeError("The listener must be a function");var a=new he(t,n||s,o),r=p?p+e:e;return s._events[r]?s._events[r].fn?s._events[r]=[s._events[r],a]:s._events[r].push(a):(s._events[r]=a,s._eventsCount++),s}function R(s,e){--s._eventsCount===0?s._events=new x:delete s._events[e]}function f(){this._events=new x,this._eventsCount=0}f.prototype.eventNames=function(){var e=[],t,n;if(this._eventsCount===0)return e;for(n in t=this._events)le.call(t,n)&&e.push(p?n.slice(1):n);return Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(t)):e};f.prototype.listeners=function(e){var t=p?p+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,a=n.length,r=new Array(a);o<a;o++)r[o]=n[o].fn;return r};f.prototype.listenerCount=function(e){var t=p?p+e:e,n=this._events[t];return n?n.fn?1:n.length:0};f.prototype.emit=function(e,t,n,o,a,r){var l=p?p+e:e;if(!this._events[l])return!1;var c=this._events[l],g=arguments.length,y,d;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),g){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,n),!0;case 4:return c.fn.call(c.context,t,n,o),!0;case 5:return c.fn.call(c.context,t,n,o,a),!0;case 6:return c.fn.call(c.context,t,n,o,a,r),!0}for(d=1,y=new Array(g-1);d<g;d++)y[d-1]=arguments[d];c.fn.apply(c.context,y)}else{var ne=c.length,$;for(d=0;d<ne;d++)switch(c[d].once&&this.removeListener(e,c[d].fn,void 0,!0),g){case 1:c[d].fn.call(c[d].context);break;case 2:c[d].fn.call(c[d].context,t);break;case 3:c[d].fn.call(c[d].context,t,n);break;case 4:c[d].fn.call(c[d].context,t,n,o);break;default:if(!y)for($=1,y=new Array(g-1);$<g;$++)y[$-1]=arguments[$];c[d].fn.apply(c[d].context,y)}}return!0};f.prototype.on=function(e,t,n){return q(this,e,t,n,!1)};f.prototype.once=function(e,t,n){return q(this,e,t,n,!0)};f.prototype.removeListener=function(e,t,n,o){var a=p?p+e:e;if(!this._events[a])return this;if(!t)return R(this,a),this;var r=this._events[a];if(r.fn)r.fn===t&&(!o||r.once)&&(!n||r.context===n)&&R(this,a);else{for(var l=0,c=[],g=r.length;l<g;l++)(r[l].fn!==t||o&&!r[l].once||n&&r[l].context!==n)&&c.push(r[l]);c.length?this._events[a]=c.length===1?c[0]:c:R(this,a)}return this};f.prototype.removeAllListeners=function(e){var t;return e?(t=p?p+e:e,this._events[t]&&R(this,t)):(this._events=new x,this._eventsCount=0),this};f.prototype.off=f.prototype.removeListener;f.prototype.addListener=f.prototype.on;f.prefixed=p;f.EventEmitter=f;N=f;var v={};k(v,"ConnectionType",()=>b);k(v,"PeerErrorType",()=>h);k(v,"BaseConnectionErrorType",()=>T);k(v,"DataConnectionErrorType",()=>O);k(v,"SerializationType",()=>C);k(v,"SocketEventType",()=>_);k(v,"ServerMessageType",()=>u);var b;(function(s){s.Data="data",s.Media="media"})(b||(b={}));var h;(function(s){s.BrowserIncompatible="browser-incompatible",s.Disconnected="disconnected",s.InvalidID="invalid-id",s.InvalidKey="invalid-key",s.Network="network",s.PeerUnavailable="peer-unavailable",s.SslUnavailable="ssl-unavailable",s.ServerError="server-error",s.SocketError="socket-error",s.SocketClosed="socket-closed",s.UnavailableID="unavailable-id",s.WebRTC="webrtc"})(h||(h={}));var T;(function(s){s.NegotiationFailed="negotiation-failed",s.ConnectionClosed="connection-closed"})(T||(T={}));var O;(function(s){s.NotOpenYet="not-open-yet",s.MessageToBig="message-too-big"})(O||(O={}));var C;(function(s){s.Binary="binary",s.BinaryUTF8="binary-utf8",s.JSON="json",s.None="raw"})(C||(C={}));var _;(function(s){s.Message="message",s.Disconnected="disconnected",s.Error="error",s.Close="close"})(_||(_={}));var u;(function(s){s.Heartbeat="HEARTBEAT",s.Candidate="CANDIDATE",s.Offer="OFFER",s.Answer="ANSWER",s.Open="OPEN",s.Error="ERROR",s.IdTaken="ID-TAKEN",s.InvalidKey="INVALID-KEY",s.Leave="LEAVE",s.Expire="EXPIRE"})(u||(u={}));var J={};J=JSON.parse('{"name":"peerjs","version":"1.5.4","keywords":["peerjs","webrtc","p2p","rtc"],"description":"PeerJS client","homepage":"https://peerjs.com","bugs":{"url":"https://github.com/peers/peerjs/issues"},"repository":{"type":"git","url":"https://github.com/peers/peerjs"},"license":"MIT","contributors":["Michelle Bu <michelle@michellebu.com>","afrokick <devbyru@gmail.com>","ericz <really.ez@gmail.com>","Jairo <kidandcat@gmail.com>","Jonas Gloning <34194370+jonasgloning@users.noreply.github.com>","Jairo Caro-Accino Viciana <jairo@galax.be>","Carlos Caballero <carlos.caballero.gonzalez@gmail.com>","hc <hheennrryy@gmail.com>","Muhammad Asif <capripio@gmail.com>","PrashoonB <prashoonbhattacharjee@gmail.com>","Harsh Bardhan Mishra <47351025+HarshCasper@users.noreply.github.com>","akotynski <aleksanderkotbury@gmail.com>","lmb <i@lmb.io>","Jairooo <jairocaro@msn.com>","Moritz St√ºckler <moritz.stueckler@gmail.com>","Simon <crydotsnakegithub@gmail.com>","Denis Lukov <denismassters@gmail.com>","Philipp Hancke <fippo@andyet.net>","Hans Oksendahl <hansoksendahl@gmail.com>","Jess <jessachandler@gmail.com>","khankuan <khankuan@gmail.com>","DUODVK <kurmanov.work@gmail.com>","XiZhao <kwang1imsa@gmail.com>","Matthias Lohr <matthias@lohr.me>","=frank tree <=frnktrb@googlemail.com>","Andre Eckardt <aeckardt@outlook.com>","Chris Cowan <agentme49@gmail.com>","Alex Chuev <alex@chuev.com>","alxnull <alxnull@e.mail.de>","Yemel Jardi <angel.jardi@gmail.com>","Ben Parnell <benjaminparnell.94@gmail.com>","Benny Lichtner <bennlich@gmail.com>","fresheneesz <bitetrudpublic@gmail.com>","bob.barstead@exaptive.com <bob.barstead@exaptive.com>","chandika <chandika@gmail.com>","emersion <contact@emersion.fr>","Christopher Van <cvan@users.noreply.github.com>","eddieherm <edhermoso@gmail.com>","Eduardo Pinho <enet4mikeenet@gmail.com>","Evandro Zanatta <ezanatta@tray.net.br>","Gardner Bickford <gardner@users.noreply.github.com>","Gian Luca <gianluca.cecchi@cynny.com>","PatrickJS <github@gdi2290.com>","jonnyf <github@jonathanfoss.co.uk>","Hizkia Felix <hizkifw@gmail.com>","Hristo Oskov <hristo.oskov@gmail.com>","Isaac Madwed <i.madwed@gmail.com>","Ilya Konanykhin <ilya.konanykhin@gmail.com>","jasonbarry <jasbarry@me.com>","Jonathan Burke <jonathan.burke.1311@googlemail.com>","Josh Hamit <josh.hamit@gmail.com>","Jordan Austin <jrax86@gmail.com>","Joel Wetzell <jwetzell@yahoo.com>","xizhao <kevin.wang@cloudera.com>","Alberto Torres <kungfoobar@gmail.com>","Jonathan Mayol <mayoljonathan@gmail.com>","Jefferson Felix <me@jsfelix.dev>","Rolf Erik Lekang <me@rolflekang.com>","Kevin Mai-Husan Chia <mhchia@users.noreply.github.com>","Pepijn de Vos <pepijndevos@gmail.com>","JooYoung <qkdlql@naver.com>","Tobias Speicher <rootcommander@gmail.com>","Steve Blaurock <sblaurock@gmail.com>","Kyrylo Shegeda <shegeda@ualberta.ca>","Diwank Singh Tomer <singh@diwank.name>","SoÃàren Balko <Soeren.Balko@gmail.com>","Arpit Solanki <solankiarpit1997@gmail.com>","Yuki Ito <yuki@gnnk.net>","Artur Zayats <zag2art@gmail.com>"],"funding":{"type":"opencollective","url":"https://opencollective.com/peer"},"collective":{"type":"opencollective","url":"https://opencollective.com/peer"},"files":["dist/*"],"sideEffects":["lib/global.ts","lib/supports.ts"],"main":"dist/bundler.cjs","module":"dist/bundler.mjs","browser-minified":"dist/peerjs.min.js","browser-unminified":"dist/peerjs.js","browser-minified-msgpack":"dist/serializer.msgpack.mjs","types":"dist/types.d.ts","engines":{"node":">= 14"},"targets":{"types":{"source":"lib/exports.ts"},"main":{"source":"lib/exports.ts","sourceMap":{"inlineSources":true}},"module":{"source":"lib/exports.ts","includeNodeModules":["eventemitter3"],"sourceMap":{"inlineSources":true}},"browser-minified":{"context":"browser","outputFormat":"global","optimize":true,"engines":{"browsers":"chrome >= 83, edge >= 83, firefox >= 80, safari >= 15"},"source":"lib/global.ts"},"browser-unminified":{"context":"browser","outputFormat":"global","optimize":false,"engines":{"browsers":"chrome >= 83, edge >= 83, firefox >= 80, safari >= 15"},"source":"lib/global.ts"},"browser-minified-msgpack":{"context":"browser","outputFormat":"esmodule","isLibrary":true,"optimize":true,"engines":{"browsers":"chrome >= 83, edge >= 83, firefox >= 102, safari >= 15"},"source":"lib/dataconnection/StreamConnection/MsgPack.ts"}},"scripts":{"contributors":"git-authors-cli --print=false && prettier --write package.json && git add package.json package-lock.json && git commit -m \\"chore(contributors): update and sort contributors list\\"","check":"tsc --noEmit && tsc -p e2e/tsconfig.json --noEmit","watch":"parcel watch","build":"rm -rf dist && parcel build","prepublishOnly":"npm run build","test":"jest","test:watch":"jest --watch","coverage":"jest --coverage --collectCoverageFrom=\\"./lib/**\\"","format":"prettier --write .","format:check":"prettier --check .","semantic-release":"semantic-release","e2e":"wdio run e2e/wdio.local.conf.ts","e2e:bstack":"wdio run e2e/wdio.bstack.conf.ts"},"devDependencies":{"@parcel/config-default":"^2.9.3","@parcel/packager-ts":"^2.9.3","@parcel/transformer-typescript-tsc":"^2.9.3","@parcel/transformer-typescript-types":"^2.9.3","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@swc/core":"^1.3.27","@swc/jest":"^0.2.24","@types/jasmine":"^4.3.4","@wdio/browserstack-service":"^8.11.2","@wdio/cli":"^8.11.2","@wdio/globals":"^8.11.2","@wdio/jasmine-framework":"^8.11.2","@wdio/local-runner":"^8.11.2","@wdio/spec-reporter":"^8.11.2","@wdio/types":"^8.10.4","http-server":"^14.1.1","jest":"^29.3.1","jest-environment-jsdom":"^29.3.1","mock-socket":"^9.0.0","parcel":"^2.9.3","prettier":"^3.0.0","semantic-release":"^21.0.0","ts-node":"^10.9.1","typescript":"^5.0.0","wdio-geckodriver-service":"^5.0.1"},"dependencies":{"@msgpack/msgpack":"^2.8.0","eventemitter3":"^4.0.7","peerjs-js-binarypack":"^2.1.0","webrtc-adapter":"^9.0.0"},"alias":{"process":false,"buffer":false}}');class de extends N.EventEmitter{constructor(e,t,n,o,a,r=5e3){super(),this.pingInterval=r,this._disconnected=!0,this._messagesQueue=[];const l=e?"wss://":"ws://";this._baseUrl=l+t+":"+n+o+"peerjs?key="+a}start(e,t){this._id=e;const n=`${this._baseUrl}&id=${e}&token=${t}`;this._socket||!this._disconnected||(this._socket=new WebSocket(n+"&version="+J.version),this._disconnected=!1,this._socket.onmessage=o=>{let a;try{a=JSON.parse(o.data),i.log("Server message received:",a)}catch{i.log("Invalid server message",o.data);return}this.emit(_.Message,a)},this._socket.onclose=o=>{this._disconnected||(i.log("Socket closed.",o),this._cleanup(),this._disconnected=!0,this.emit(_.Disconnected))},this._socket.onopen=()=>{this._disconnected||(this._sendQueuedMessages(),i.log("Socket open"),this._scheduleHeartbeat())})}_scheduleHeartbeat(){this._wsPingTimer=setTimeout(()=>{this._sendHeartbeat()},this.pingInterval)}_sendHeartbeat(){if(!this._wsOpen()){i.log("Cannot send heartbeat, because socket closed");return}const e=JSON.stringify({type:u.Heartbeat});this._socket.send(e),this._scheduleHeartbeat()}_wsOpen(){return!!this._socket&&this._socket.readyState===1}_sendQueuedMessages(){const e=[...this._messagesQueue];this._messagesQueue=[];for(const t of e)this.send(t)}send(e){if(this._disconnected)return;if(!this._id){this._messagesQueue.push(e);return}if(!e.type){this.emit(_.Error,"Invalid message");return}if(!this._wsOpen())return;const t=JSON.stringify(e);this._socket.send(t)}close(){this._disconnected||(this._cleanup(),this._disconnected=!0)}_cleanup(){this._socket&&(this._socket.onopen=this._socket.onmessage=this._socket.onclose=null,this._socket.close(),this._socket=void 0),clearTimeout(this._wsPingTimer)}}class Z{constructor(e){this.connection=e}startConnection(e){const t=this._startPeerConnection();if(this.connection.peerConnection=t,this.connection.type===b.Media&&e._stream&&this._addTracksToConnection(e._stream,t),e.originator){const n=this.connection,o={ordered:!!e.reliable},a=t.createDataChannel(n.label,o);n._initializeDataChannel(a),this._makeOffer()}else this.handleSDP("OFFER",e.sdp)}_startPeerConnection(){i.log("Creating RTCPeerConnection.");const e=new RTCPeerConnection(this.connection.provider.options.config);return this._setupListeners(e),e}_setupListeners(e){const t=this.connection.peer,n=this.connection.connectionId,o=this.connection.type,a=this.connection.provider;i.log("Listening for ICE candidates."),e.onicecandidate=r=>{!r.candidate||!r.candidate.candidate||(i.log(`Received ICE candidates for ${t}:`,r.candidate),a.socket.send({type:u.Candidate,payload:{candidate:r.candidate,type:o,connectionId:n},dst:t}))},e.oniceconnectionstatechange=()=>{switch(e.iceConnectionState){case"failed":i.log("iceConnectionState is failed, closing connections to "+t),this.connection.emitError(T.NegotiationFailed,"Negotiation of connection to "+t+" failed."),this.connection.close();break;case"closed":i.log("iceConnectionState is closed, closing connections to "+t),this.connection.emitError(T.ConnectionClosed,"Connection to "+t+" closed."),this.connection.close();break;case"disconnected":i.log("iceConnectionState changed to disconnected on the connection with "+t);break;case"completed":e.onicecandidate=()=>{};break}this.connection.emit("iceStateChanged",e.iceConnectionState)},i.log("Listening for data channel"),e.ondatachannel=r=>{i.log("Received data channel");const l=r.channel;a.getConnection(t,n)._initializeDataChannel(l)},i.log("Listening for remote stream"),e.ontrack=r=>{i.log("Received remote stream");const l=r.streams[0],c=a.getConnection(t,n);if(c.type===b.Media){const g=c;this._addStreamToMediaConnection(l,g)}}}cleanup(){i.log("Cleaning up PeerConnection to "+this.connection.peer);const e=this.connection.peerConnection;if(!e)return;this.connection.peerConnection=null,e.onicecandidate=e.oniceconnectionstatechange=e.ondatachannel=e.ontrack=()=>{};const t=e.signalingState!=="closed";let n=!1;const o=this.connection.dataChannel;o&&(n=!!o.readyState&&o.readyState!=="closed"),(t||n)&&e.close()}async _makeOffer(){const e=this.connection.peerConnection,t=this.connection.provider;try{const n=await e.createOffer(this.connection.options.constraints);i.log("Created offer."),this.connection.options.sdpTransform&&typeof this.connection.options.sdpTransform=="function"&&(n.sdp=this.connection.options.sdpTransform(n.sdp)||n.sdp);try{await e.setLocalDescription(n),i.log("Set localDescription:",n,`for:${this.connection.peer}`);let o={sdp:n,type:this.connection.type,connectionId:this.connection.connectionId,metadata:this.connection.metadata};if(this.connection.type===b.Data){const a=this.connection;o={...o,label:a.label,reliable:a.reliable,serialization:a.serialization}}t.socket.send({type:u.Offer,payload:o,dst:this.connection.peer})}catch(o){o!="OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer"&&(t.emitError(h.WebRTC,o),i.log("Failed to setLocalDescription, ",o))}}catch(n){t.emitError(h.WebRTC,n),i.log("Failed to createOffer, ",n)}}async _makeAnswer(){const e=this.connection.peerConnection,t=this.connection.provider;try{const n=await e.createAnswer();i.log("Created answer."),this.connection.options.sdpTransform&&typeof this.connection.options.sdpTransform=="function"&&(n.sdp=this.connection.options.sdpTransform(n.sdp)||n.sdp);try{await e.setLocalDescription(n),i.log("Set localDescription:",n,`for:${this.connection.peer}`),t.socket.send({type:u.Answer,payload:{sdp:n,type:this.connection.type,connectionId:this.connection.connectionId},dst:this.connection.peer})}catch(o){t.emitError(h.WebRTC,o),i.log("Failed to setLocalDescription, ",o)}}catch(n){t.emitError(h.WebRTC,n),i.log("Failed to create answer, ",n)}}async handleSDP(e,t){t=new RTCSessionDescription(t);const n=this.connection.peerConnection,o=this.connection.provider;i.log("Setting remote description",t);const a=this;try{await n.setRemoteDescription(t),i.log(`Set remoteDescription:${e} for:${this.connection.peer}`),e==="OFFER"&&await a._makeAnswer()}catch(r){o.emitError(h.WebRTC,r),i.log("Failed to setRemoteDescription, ",r)}}async handleCandidate(e){i.log("handleCandidate:",e);try{await this.connection.peerConnection.addIceCandidate(e),i.log(`Added ICE candidate for:${this.connection.peer}`)}catch(t){this.connection.provider.emitError(h.WebRTC,t),i.log("Failed to handleCandidate, ",t)}}_addTracksToConnection(e,t){if(i.log(`add tracks from stream ${e.id} to peer connection`),!t.addTrack)return i.error("Your browser does't support RTCPeerConnection#addTrack. Ignored.");e.getTracks().forEach(n=>{t.addTrack(n,e)})}_addStreamToMediaConnection(e,t){i.log(`add stream ${e.id} to media connection ${t.connectionId}`),t.addStream(e)}}class ee extends N.EventEmitter{emitError(e,t){i.error("Error:",t),this.emit("error",new ue(`${e}`,t))}}class ue extends Error{constructor(e,t){typeof t=="string"?super(t):(super(),Object.assign(this,t)),this.type=e}}class te extends ee{get open(){return this._open}constructor(e,t,n){super(),this.peer=e,this.provider=t,this.options=n,this._open=!1,this.metadata=n.metadata}}var L;const I=class I extends te{get type(){return b.Media}get localStream(){return this._localStream}get remoteStream(){return this._remoteStream}constructor(e,t,n){super(e,t,n),this._localStream=this.options._stream,this.connectionId=this.options.connectionId||I.ID_PREFIX+m.randomToken(),this._negotiator=new Z(this),this._localStream&&this._negotiator.startConnection({_stream:this._localStream,originator:!0})}_initializeDataChannel(e){this.dataChannel=e,this.dataChannel.onopen=()=>{i.log(`DC#${this.connectionId} dc connection success`),this.emit("willCloseOnRemote")},this.dataChannel.onclose=()=>{i.log(`DC#${this.connectionId} dc closed for:`,this.peer),this.close()}}addStream(e){i.log("Receiving stream",e),this._remoteStream=e,super.emit("stream",e)}handleMessage(e){const t=e.type,n=e.payload;switch(e.type){case u.Answer:this._negotiator.handleSDP(t,n.sdp),this._open=!0;break;case u.Candidate:this._negotiator.handleCandidate(n.candidate);break;default:i.warn(`Unrecognized message type:${t} from peer:${this.peer}`);break}}answer(e,t={}){if(this._localStream){i.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");return}this._localStream=e,t&&t.sdpTransform&&(this.options.sdpTransform=t.sdpTransform),this._negotiator.startConnection({...this.options._payload,_stream:e});const n=this.provider._getMessages(this.connectionId);for(const o of n)this.handleMessage(o);this._open=!0}close(){this._negotiator&&(this._negotiator.cleanup(),this._negotiator=null),this._localStream=null,this._remoteStream=null,this.provider&&(this.provider._removeConnection(this),this.provider=null),this.options&&this.options._stream&&(this.options._stream=null),this.open&&(this._open=!1,super.emit("close"))}};L=new WeakMap,S(I,L,I.ID_PREFIX="mc_");let A=I;class fe{constructor(e){this._options=e}_buildRequest(e){const t=this._options.secure?"https":"http",{host:n,port:o,path:a,key:r}=this._options,l=new URL(`${t}://${n}:${o}${a}${r}/${e}`);return l.searchParams.set("ts",`${Date.now()}${Math.random()}`),l.searchParams.set("version",J.version),fetch(l.href,{referrerPolicy:this._options.referrerPolicy})}async retrieveId(){try{const e=await this._buildRequest("id");if(e.status!==200)throw new Error(`Error. Status:${e.status}`);return e.text()}catch(e){i.error("Error retrieving ID",e);let t="";throw this._options.path==="/"&&this._options.host!==m.CLOUD_HOST&&(t=" If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer."),new Error("Could not get an ID from the server."+t)}}async listAllPeers(){try{const e=await this._buildRequest("peers");if(e.status!==200){if(e.status===401){let t="";throw this._options.host===m.CLOUD_HOST?t="It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key.":t="You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.",new Error("It doesn't look like you have permission to list peers IDs. "+t)}throw new Error(`Error. Status:${e.status}`)}return e.json()}catch(e){throw i.error("Error retrieving list peers",e),new Error("Could not get list peers from the server."+e)}}}var F,B;const w=class w extends te{get type(){return b.Data}constructor(e,t,n){super(e,t,n),this.connectionId=this.options.connectionId||w.ID_PREFIX+G(),this.label=this.options.label||this.connectionId,this.reliable=!!this.options.reliable,this._negotiator=new Z(this),this._negotiator.startConnection(this.options._payload||{originator:!0,reliable:this.reliable})}_initializeDataChannel(e){this.dataChannel=e,this.dataChannel.onopen=()=>{i.log(`DC#${this.connectionId} dc connection success`),this._open=!0,this.emit("open")},this.dataChannel.onmessage=t=>{i.log(`DC#${this.connectionId} dc onmessage:`,t.data)},this.dataChannel.onclose=()=>{i.log(`DC#${this.connectionId} dc closed for:`,this.peer),this.close()}}close(e){if(e!=null&&e.flush){this.send({__peerData:{type:"close"}});return}this._negotiator&&(this._negotiator.cleanup(),this._negotiator=null),this.provider&&(this.provider._removeConnection(this),this.provider=null),this.dataChannel&&(this.dataChannel.onopen=null,this.dataChannel.onmessage=null,this.dataChannel.onclose=null,this.dataChannel=null),this.open&&(this._open=!1,super.emit("close"))}send(e,t=!1){if(!this.open){this.emitError(O.NotOpenYet,"Connection is not open. You should listen for the `open` event before sending messages.");return}return this._send(e,t)}async handleMessage(e){const t=e.payload;switch(e.type){case u.Answer:await this._negotiator.handleSDP(e.type,t.sdp);break;case u.Candidate:await this._negotiator.handleCandidate(t.candidate);break;default:i.warn("Unrecognized message type:",e.type,"from peer:",this.peer);break}}};F=new WeakMap,B=new WeakMap,S(w,F,w.ID_PREFIX="dc_"),S(w,B,w.MAX_BUFFERED_AMOUNT=8388608);let P=w;class H extends P{get bufferSize(){return this._bufferSize}_initializeDataChannel(e){super._initializeDataChannel(e),this.dataChannel.binaryType="arraybuffer",this.dataChannel.addEventListener("message",t=>this._handleDataMessage(t))}_bufferedSend(e){(this._buffering||!this._trySend(e))&&(this._buffer.push(e),this._bufferSize=this._buffer.length)}_trySend(e){if(!this.open)return!1;if(this.dataChannel.bufferedAmount>P.MAX_BUFFERED_AMOUNT)return this._buffering=!0,setTimeout(()=>{this._buffering=!1,this._tryBuffer()},50),!1;try{this.dataChannel.send(e)}catch(t){return i.error(`DC#:${this.connectionId} Error when sending:`,t),this._buffering=!0,this.close(),!1}return!0}_tryBuffer(){if(!this.open||this._buffer.length===0)return;const e=this._buffer[0];this._trySend(e)&&(this._buffer.shift(),this._bufferSize=this._buffer.length,this._tryBuffer())}close(e){if(e!=null&&e.flush){this.send({__peerData:{type:"close"}});return}this._buffer=[],this._bufferSize=0,super.close()}constructor(...e){super(...e),this._buffer=[],this._bufferSize=0,this._buffering=!1}}class M extends H{close(e){super.close(e),this._chunkedData={}}constructor(e,t,n){super(e,t,n),this.chunker=new Q,this.serialization=C.Binary,this._chunkedData={}}_handleDataMessage({data:e}){const t=K(e),n=t.__peerData;if(n){if(n.type==="close"){this.close();return}this._handleChunk(t);return}this.emit("data",t)}_handleChunk(e){const t=e.__peerData,n=this._chunkedData[t]||{data:[],count:0,total:e.total};if(n.data[e.n]=new Uint8Array(e.data),n.count++,this._chunkedData[t]=n,n.total===n.count){delete this._chunkedData[t];const o=oe(n.data);this._handleDataMessage({data:o})}}_send(e,t){const n=X(e);if(n instanceof Promise)return this._send_blob(n);if(!t&&n.byteLength>this.chunker.chunkedMTU){this._sendChunks(n);return}this._bufferedSend(n)}async _send_blob(e){const t=await e;if(t.byteLength>this.chunker.chunkedMTU){this._sendChunks(t);return}this._bufferedSend(t)}_sendChunks(e){const t=this.chunker.chunk(e);i.log(`DC#${this.connectionId} Try to send ${t.length} chunks...`);for(const n of t)this.send(n,!0)}}class pe extends H{_handleDataMessage({data:e}){super.emit("data",e)}_send(e,t){this._bufferedSend(e)}constructor(...e){super(...e),this.serialization=C.None}}class me extends H{_handleDataMessage({data:e}){const t=this.parse(this.decoder.decode(e)),n=t.__peerData;if(n&&n.type==="close"){this.close();return}this.emit("data",t)}_send(e,t){const n=this.encoder.encode(this.stringify(e));if(n.byteLength>=m.chunkedMTU){this.emitError(O.MessageToBig,"Message too big for JSON channel");return}this._bufferedSend(n)}constructor(...e){super(...e),this.serialization=C.JSON,this.encoder=new TextEncoder,this.decoder=new TextDecoder,this.stringify=JSON.stringify,this.parse=JSON.parse}}var U;const E=class E extends ee{get id(){return this._id}get options(){return this._options}get open(){return this._open}get socket(){return this._socket}get connections(){const e=Object.create(null);for(const[t,n]of this._connections)e[t]=n;return e}get destroyed(){return this._destroyed}get disconnected(){return this._disconnected}constructor(e,t){super(),this._serializers={raw:pe,json:me,binary:M,"binary-utf8":M,default:M},this._id=null,this._lastServerId=null,this._destroyed=!1,this._disconnected=!1,this._open=!1,this._connections=new Map,this._lostMessages=new Map;let n;if(e&&e.constructor==Object?t=e:e&&(n=e.toString()),t={debug:0,host:m.CLOUD_HOST,port:m.CLOUD_PORT,path:"/",key:E.DEFAULT_KEY,token:m.randomToken(),config:m.defaultConfig,referrerPolicy:"strict-origin-when-cross-origin",serializers:{},...t},this._options=t,this._serializers={...this._serializers,...this.options.serializers},this._options.host==="/"&&(this._options.host=window.location.hostname),this._options.path&&(this._options.path[0]!=="/"&&(this._options.path="/"+this._options.path),this._options.path[this._options.path.length-1]!=="/"&&(this._options.path+="/")),this._options.secure===void 0&&this._options.host!==m.CLOUD_HOST?this._options.secure=m.isSecure():this._options.host==m.CLOUD_HOST&&(this._options.secure=!0),this._options.logFunction&&i.setLogFunction(this._options.logFunction),i.logLevel=this._options.debug||0,this._api=new fe(t),this._socket=this._createServerConnection(),!m.supports.audioVideo&&!m.supports.data){this._delayedAbort(h.BrowserIncompatible,"The current browser does not support WebRTC");return}if(n&&!m.validateId(n)){this._delayedAbort(h.InvalidID,`ID "${n}" is invalid`);return}n?this._initialize(n):this._api.retrieveId().then(o=>this._initialize(o)).catch(o=>this._abort(h.ServerError,o))}_createServerConnection(){const e=new de(this._options.secure,this._options.host,this._options.port,this._options.path,this._options.key,this._options.pingInterval);return e.on(_.Message,t=>{this._handleMessage(t)}),e.on(_.Error,t=>{this._abort(h.SocketError,t)}),e.on(_.Disconnected,()=>{this.disconnected||(this.emitError(h.Network,"Lost connection to server."),this.disconnect())}),e.on(_.Close,()=>{this.disconnected||this._abort(h.SocketClosed,"Underlying socket is already closed.")}),e}_initialize(e){this._id=e,this.socket.start(e,this._options.token)}_handleMessage(e){const t=e.type,n=e.payload,o=e.src;switch(t){case u.Open:this._lastServerId=this.id,this._open=!0,this.emit("open",this.id);break;case u.Error:this._abort(h.ServerError,n.msg);break;case u.IdTaken:this._abort(h.UnavailableID,`ID "${this.id}" is taken`);break;case u.InvalidKey:this._abort(h.InvalidKey,`API KEY "${this._options.key}" is invalid`);break;case u.Leave:i.log(`Received leave message from ${o}`),this._cleanupPeer(o),this._connections.delete(o);break;case u.Expire:this.emitError(h.PeerUnavailable,`Could not connect to peer ${o}`);break;case u.Offer:{const a=n.connectionId;let r=this.getConnection(o,a);if(r&&(r.close(),i.warn(`Offer received for existing Connection ID:${a}`)),n.type===b.Media){const c=new A(o,this,{connectionId:a,_payload:n,metadata:n.metadata});r=c,this._addConnection(o,r),this.emit("call",c)}else if(n.type===b.Data){const c=new this._serializers[n.serialization](o,this,{connectionId:a,_payload:n,metadata:n.metadata,label:n.label,serialization:n.serialization,reliable:n.reliable});r=c,this._addConnection(o,r),this.emit("connection",c)}else{i.warn(`Received malformed connection type:${n.type}`);return}const l=this._getMessages(a);for(const c of l)r.handleMessage(c);break}default:{if(!n){i.warn(`You received a malformed message from ${o} of type ${t}`);return}const a=n.connectionId,r=this.getConnection(o,a);r&&r.peerConnection?r.handleMessage(e):a?this._storeMessage(a,e):i.warn("You received an unrecognized message:",e);break}}}_storeMessage(e,t){this._lostMessages.has(e)||this._lostMessages.set(e,[]),this._lostMessages.get(e).push(t)}_getMessages(e){const t=this._lostMessages.get(e);return t?(this._lostMessages.delete(e),t):[]}connect(e,t={}){if(t={serialization:"default",...t},this.disconnected){i.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available."),this.emitError(h.Disconnected,"Cannot connect to new Peer after disconnecting from server.");return}const n=new this._serializers[t.serialization](e,this,t);return this._addConnection(e,n),n}call(e,t,n={}){if(this.disconnected){i.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect."),this.emitError(h.Disconnected,"Cannot connect to new Peer after disconnecting from server.");return}if(!t){i.error("To call a peer, you must provide a stream from your browser's `getUserMedia`.");return}const o=new A(e,this,{...n,_stream:t});return this._addConnection(e,o),o}_addConnection(e,t){i.log(`add connection ${t.type}:${t.connectionId} to peerId:${e}`),this._connections.has(e)||this._connections.set(e,[]),this._connections.get(e).push(t)}_removeConnection(e){const t=this._connections.get(e.peer);if(t){const n=t.indexOf(e);n!==-1&&t.splice(n,1)}this._lostMessages.delete(e.connectionId)}getConnection(e,t){const n=this._connections.get(e);if(!n)return null;for(const o of n)if(o.connectionId===t)return o;return null}_delayedAbort(e,t){setTimeout(()=>{this._abort(e,t)},0)}_abort(e,t){i.error("Aborting!"),this.emitError(e,t),this._lastServerId?this.disconnect():this.destroy()}destroy(){this.destroyed||(i.log(`Destroy peer with ID:${this.id}`),this.disconnect(),this._cleanup(),this._destroyed=!0,this.emit("close"))}_cleanup(){for(const e of this._connections.keys())this._cleanupPeer(e),this._connections.delete(e);this.socket.removeAllListeners()}_cleanupPeer(e){const t=this._connections.get(e);if(t)for(const n of t)n.close()}disconnect(){if(this.disconnected)return;const e=this.id;i.log(`Disconnect peer with ID:${e}`),this._disconnected=!0,this._open=!1,this.socket.close(),this._lastServerId=e,this._id=null,this.emit("disconnected",e)}reconnect(){if(this.disconnected&&!this.destroyed)i.log(`Attempting reconnection to server with ID ${this._lastServerId}`),this._disconnected=!1,this._initialize(this._lastServerId);else{if(this.destroyed)throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");if(!this.disconnected&&!this.open)i.error("In a hurry? We're still trying to make the initial connection!");else throw new Error(`Peer ${this.id} cannot reconnect because it is not disconnected from the server!`)}}listAllPeers(e=t=>{}){this._api.listAllPeers().then(t=>e(t)).catch(t=>this._abort(h.ServerError,t))}};U=new WeakMap,S(E,U,E.DEFAULT_KEY="peerjs");let z=E;var ye=z;export{ye as $};
